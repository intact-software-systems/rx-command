apply plugin: "java"
apply plugin: 'maven'


project.ext {
    rxEngineVersion = "1.0"
    logbackVersion = "1.2.3"
}

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "propdeps"
    apply plugin: "propdeps-idea"

    dependencies {
        compile "ch.qos.logback:logback-classic:${logbackVersion}"
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
//        compile "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2'
    }

    group = "com.intact.$rootProject.name"
    version = "$rxEngineVersion"

    sourceCompatibility = "1.11"
    targetCompatibility = "1.11"

    [compileJava, compileTestJava]*.options*.encoding = "UTF-8"

    compileJava.dependsOn(processResources)

    afterEvaluate {
        repositories {
            jcenter()
        }

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'org.junit.jupiter.api',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }

//            filter {
//                includeTestsMatching '*Test'
//            }

//            useJUnitPlatform()
        }

        jar {
            inputs.property("moduleName", moduleName)
            manifest {
                attributes('Automatic-Module-Name': moduleName)
            }
        }

        task writeNewPom {
            doLast {
                pom {
                    project {
                        groupId 'com.intact.rx'
                        artifactId 'rx-command'
                        version '1.0'

                        inceptionYear '2020'
                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                    }
                }.writeTo("pom.xml")
            }
        }
    }
}
